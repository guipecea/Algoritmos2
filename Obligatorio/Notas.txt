1. SORTING	
Nombre de archivo: ejercicio1.cpp/Ejercicio1.java
Se desea ordenar un conjunto de números enteros, no acotados. Se solicita que implemente un algoritmo basado en el uso de un heap.
Restricciones: O(NLogN)
Formato de entrada
N
n1
n2
… 
nN


La primera línea indica la cantidad de elementos a ordenar. Las siguientes N líneas son los elementos a ordenar.
Formato de salida
La salida contendrá N líneas, siendo estos los elementos ordenados de menor a mayor.

Nota: podría haber repetidos.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. Verificador de Heap        
Nombre de archivo: ejercicio2.cpp/Ejercicio2.java
Dada una secuencia de números se quiere saber si podría ser una representación de un Min Heap.
Restricciones: O(N)
Formato de entrada
N
n1
n2
… 
nN


La primera línea indica la cantidad de elementos del heap. Las siguientes N líneas son los elementos de 0 a N-1.
Formato de salida
La salida contendrá 1 sola linea:
“1” en el caso de que la entrada representa un Min Heap.
“0” en caso contrario.
Ejemplo de entrada
7
6
12
22
34
21
41
55

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. Contador doble       
Nombre de archivo: ejercicio3.cpp/Ejercicio3.java
Dada una secuencia de palabras se desea saber aquellas que aparecieron dos veces.
Restricciones: O(N) promedio
Formato de entrada
N
palabra1
palabra2
… 
palabraN


La primera línea indica la cantidad de palabras a leer. Las siguientes N líneas son el conjunto de palabras a trabajar.
Formato de salida
La salida contendrá 1 línea, que es la cantidad de palabras que ocurrieron dos veces en el formato de entrada.

Ejemplo de entrada/salida
7
AAA
BAB
ABC
AAA
ABC
BCA
BBB
2


4
AAA
AAA
AAA
BAC
0


3
AAA
BBB
CCC
0

